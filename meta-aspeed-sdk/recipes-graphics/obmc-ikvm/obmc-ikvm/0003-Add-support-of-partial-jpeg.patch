From ed533710e09fabd062014c13f75ae1f1a6b79bd9 Mon Sep 17 00:00:00 2001
From: Troy Lee <troy_lee@aspeedtech.com>
Date: Thu, 25 May 2023 15:34:35 +0800
Subject: [PATCH] Add support of partial jpeg

Partial jpeg is a standard jpeg but only include the changed blocks to
save amount of data to be transferred.

Use '-m' to assign jpeg format
 0: standard jpeg, 1: aspeed jpeg, 2: partial jpeg

Both 0/2 can be used with TightVNC like vnc-clients.

Signed-off-by: Jammy Huang <jammy_huang@aspeedtech.com>
Signed-off-by: Troy Lee <troy_lee@aspeedtech.com>
---
 ikvm_args.cpp   |  2 +-
 ikvm_server.cpp |  8 +++++++-
 ikvm_video.cpp  | 16 ++++++++++++++++
 ikvm_video.hpp  | 13 +++++++++++++
 4 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/ikvm_args.cpp b/ikvm_args.cpp
index 085a7e1..6377f65 100644
--- a/ikvm_args.cpp
+++ b/ikvm_args.cpp
@@ -39,7 +39,7 @@ Args::Args(int argc, char* argv[]) :
                 break;
             case 'm':
                 format = (int)strtol(optarg, NULL, 0);
-                if (format < 0 || format > 1)
+                if (format < 0 || format > 2)
                     format = 0;
                 break;
             case 'h':
diff --git a/ikvm_server.cpp b/ikvm_server.cpp
index 5050030..18367dd 100644
--- a/ikvm_server.cpp
+++ b/ikvm_server.cpp
@@ -173,7 +173,13 @@ void Server::sendFrame()
                 else
                 {
                     cl->tightEncoding = rfbEncodingTight;
-                    rfbSendTightHeader(cl, 0, 0, video.getWidth(), video.getHeight());
+                    if (video.getFormat() == 2) {
+                        v4l2_rect r = video.getBoundingBox(i);
+        
+                        rfbSendTightHeader(cl, r.left, r.top, r.width, r.height);
+                    } else {
+                        rfbSendTightHeader(cl, 0, 0, video.getWidth(), video.getHeight());
+                    }
 
                     cl->updateBuf[cl->ublen++] = (char)(rfbTightJpeg << 4);
                 }
diff --git a/ikvm_video.cpp b/ikvm_video.cpp
index 7c6cf28..914ddb5 100644
--- a/ikvm_video.cpp
+++ b/ikvm_video.cpp
@@ -20,6 +20,7 @@
 #include <xyz/openbmc_project/Common/File/error.hpp>
 
 #define V4L2_PIX_FMT_AJPG     v4l2_fourcc('A', 'J', 'P', 'G')
+#define V4L2_PIX_FMT_FLAG_PARTIAL_JPG   0x00000004
 
 namespace ikvm
 {
@@ -69,6 +70,7 @@ void Video::getFrame()
     v4l2_buffer buf;
     fd_set fds;
     timeval tv;
+    v4l2_selection comp = {.type = V4L2_BUF_TYPE_VIDEO_CAPTURE, .target = V4L2_SEL_TGT_CROP_DEFAULT};
 
     if (fd < 0)
     {
@@ -111,6 +113,18 @@ void Video::getFrame()
                 {
                     buffers[buf.index].payload = buf.bytesused;
                     buffers[buf.index].sequence = buf.sequence;
+                    if (format == 2) {
+                        rc = ioctl(fd, VIDIOC_G_SELECTION, &comp);
+                        if (rc) {
+                            log<level::ERR>("Failed to get selection box",
+                                            entry("ERROR=%s", strerror(errno)));
+                            comp.r.left = 0;
+                            comp.r.top = 0;
+                            comp.r.width = width;
+                            comp.r.height = height;
+                        }
+                        buffers[buf.index].box = comp.r;
+                    }
                     buffersDone.push_back(buf.index);
                 }
                 else
@@ -463,6 +477,8 @@ void Video::start()
     }
 
     switch (format) {
+        case 2:
+            fmt.fmt.pix.flags = V4L2_PIX_FMT_FLAG_PARTIAL_JPG;
         default:
         case 0:
             fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_JPEG;
diff --git a/ikvm_video.hpp b/ikvm_video.hpp
index 76b22e0..d21f111 100644
--- a/ikvm_video.hpp
+++ b/ikvm_video.hpp
@@ -6,6 +6,7 @@
 #include <string>
 #include <vector>
 #include <deque>
+#include <linux/videodev2.h>
 
 namespace ikvm
 {
@@ -166,6 +167,17 @@ class Video
         format = _fmt;
     }
 
+    /*
+     * @brief Gets the bounding-box of the partial-jpeg
+     *
+     * @return Bounding-box of the video frame
+     */
+    inline v4l2_rect getBoundingBox(unsigned int i) const
+    {
+        return buffers[i].box;
+    }
+
+
     /* @brief Number of bits per component of a pixel */
     static const int bitsPerSample;
     /* @brief Number of bytes of storage for a pixel */
@@ -196,6 +208,7 @@ class Video
         size_t payload;
         size_t size;
         uint32_t sequence;
+        v4l2_rect box;
     };
 
     /*
