From b867675f6ef1b455b4ba78e156c298ce6c3e57b3 Mon Sep 17 00:00:00 2001
From: Jammy Huang <jammy_huang@aspeedtech.com>
Date: Fri, 18 Feb 2022 14:08:40 +0800
Subject: [PATCH] Avoid frame drop

For standard jpeg, frame-drop is OK. Just send the latest frame
to the client is fine. But for aspeed jpeg, frame-drop will lead
to video broken because aspeed jpeg isn't full frame compression.

There are 2 condition will lead to frame-drop:
1. more than 1 buf return in getFrame().
   To fix this problem, we add deque, buffersDone, to replace
   lastFrameIndex. In this way, we can track all done buf.
2. client is busy without new update request.
   To fix this problem, we will try to deliver all done buf to
   clients in sendFrame()

The policy lastFrameIndex works:
lastFrameIndex will be updated in getFrame to point to the lastest
buf. Other buf done will be queue back to driver immediatelly. All
other functions, getData/getFrameSize, use it to know which buf's
data should be retrieved.

New policy is:
Record all done buf in getFrame(). Send all done buf to clients in
sendFrame and then queue back to driver.

Signed-off-by: Jammy Huang <jammy_huang@aspeedtech.com>
---
 ikvm_server.cpp | 108 +++++++++++++++++++++++-------------------------
 ikvm_video.cpp  |  84 ++++++++++++++++++++++++-------------
 ikvm_video.hpp  |  34 +++++++++++++--
 3 files changed, 137 insertions(+), 89 deletions(-)

diff --git a/ikvm_server.cpp b/ikvm_server.cpp
index e5f12c5..6bf61e3 100644
--- a/ikvm_server.cpp
+++ b/ikvm_server.cpp
@@ -10,6 +10,7 @@
 #include <boost/crc.hpp>
 
 #define 	rfbEncodingAspeed   18
+#define ROUND_DOWN(x,r) ((x) & ~((r) - 1))
 
 namespace ikvm
 {
@@ -97,10 +98,10 @@ void Server::run()
 void Server::sendFrame()
 {
     char* data = video.getData();
-    uint32_t frameCount = 0;
+    uint32_t frameCount;
     rfbClientIteratorPtr it;
     rfbClientPtr cl;
-    int64_t frame_crc = -1;
+    bool frame_sent = false;
 
     if (!data || pendingResize)
     {
@@ -119,79 +120,71 @@ void Server::sendFrame()
             continue;
         }
 
-        if (cd->skipFrame)
+        for (auto i : video.buffersDone)
         {
-            cd->skipFrame--;
-            continue;
-        }
-
-        if (!cd->needUpdate)
-        {
-            continue;
-        }
-
-        if (calcFrameCRC)
-        {
-            if (frame_crc == -1)
+            if (cd->skipFrame)
             {
-                /* JFIF header contains some varying data so skip it for
-                 * checksum calculation */
-                frame_crc = boost::crc<32, 0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF,
-                                       true, true>(data + 0x30,
-                                                   video.getFrameSize() - 0x30);
+                cd->skipFrame--;
+                continue;
             }
 
-            if (cd->last_crc == frame_crc)
+            if (!cd->needUpdate)
             {
                 continue;
             }
+            frame_sent = true;
 
-            cd->last_crc = frame_crc;
-        }
+            if (cl->enableLastRectEncoding)
+            {
+                fu->nRects = 0xFFFF;
+            }
+            else
+            {
+                fu->nRects = Swap16IfLE(1);
+            }
 
-        cd->needUpdate = false;
+            fu->type = rfbFramebufferUpdate;
+            cl->ublen = sz_rfbFramebufferUpdateMsg;
+            rfbSendUpdateBuf(cl);
 
-        if (cl->enableLastRectEncoding)
-        {
-            fu->nRects = 0xFFFF;
-        }
-        else
-        {
-            fu->nRects = Swap16IfLE(1);
-        }
+            cl->tightEncoding = rfbEncodingAspeed;
+            rfbSendTightHeader(cl, 0, 0, video.getWidth(), video.getHeight());
 
-        fu->type = rfbFramebufferUpdate;
-        cl->ublen = sz_rfbFramebufferUpdateMsg;
-        rfbSendUpdateBuf(cl);
+            if (video.getFormat() == 1)
+            {
+                frameCount = video.getFrameCount(i);
+                cl->updateBuf[cl->ublen++] = (char)(0);
+                cl->updateBuf[cl->ublen++] = (char)(frameCount >> 24 & 0xff);
+                cl->updateBuf[cl->ublen++] = (char)(frameCount >> 16 & 0xff);
+                cl->updateBuf[cl->ublen++] = (char)(frameCount >> 8 & 0xff);
+                cl->updateBuf[cl->ublen++] = (char)(frameCount & 0xff);
+                cl->updateBuf[cl->ublen++] = (char)(video.getSubsampling());
+                cl->updateBuf[cl->ublen++] = (char)(0x00);	// the value of quality if changed
+            }
+            else if (video.getFormat() == 0)
+            {
+                cl->updateBuf[cl->ublen++] = (char)(rfbTightJpeg << 4);
+            }
+            rfbSendCompressedDataTight(cl, video.getData(i), video.getFrameSize(i));
 
-        cl->tightEncoding = rfbEncodingAspeed;
-        rfbSendTightHeader(cl, 0, 0, video.getWidth(), video.getHeight());
+            if (cl->enableLastRectEncoding)
+            {
+                rfbSendLastRectMarker(cl);
+            }
 
-        if (video.getFormat() == 1)
-        {
-            cl->updateBuf[cl->ublen++] = (char)(0);
-            cl->updateBuf[cl->ublen++] = (char)(frameCount >> 24 & 0xff);
-            cl->updateBuf[cl->ublen++] = (char)(frameCount >> 16 & 0xff);
-            cl->updateBuf[cl->ublen++] = (char)(frameCount >> 8 & 0xff);
-            cl->updateBuf[cl->ublen++] = (char)(frameCount & 0xff);
-            cl->updateBuf[cl->ublen++] = (char)(video.getSubsampling());
-            cl->updateBuf[cl->ublen++] = (char)(0x00);	// the value of quality if changed
+            rfbSendUpdateBuf(cl);
         }
-        else if (video.getFormat() == 0)
-        {
-            cl->updateBuf[cl->ublen++] = (char)(rfbTightJpeg << 4);
-        }
-        rfbSendCompressedDataTight(cl, data, video.getFrameSize());
 
-        if (cl->enableLastRectEncoding)
+        if (frame_sent)
         {
-            rfbSendLastRectMarker(cl);
+            cd->needUpdate = false;
         }
-
-        rfbSendUpdateBuf(cl);
     }
 
     rfbReleaseClientIterator(it);
+
+    if (frame_sent)
+        video.releaseFrames();
 }
 
 void Server::clientFramebufferUpdateRequest(
@@ -228,7 +221,7 @@ enum rfbNewClientAction Server::newClient(rfbClientPtr cl)
     Server* server = (Server*)cl->screen->screenData;
 
     cl->clientData =
-        new ClientData(server->video.getFrameRate(), &server->input);
+        new ClientData(ROUND_DOWN(server->video.getFrameRate(), 8), &server->input);
     cl->clientGoneHook = clientGone;
     cl->clientFramebufferUpdateRequestHook = clientFramebufferUpdateRequest;
     if (!server->numClients++)
@@ -265,8 +258,9 @@ void Server::doResize()
             continue;
         }
 
+        // let skipFrame round-down per interval of aspeed's I frame
         // delay video updates to give the client time to resize
-        cd->skipFrame = video.getFrameRate();
+        cd->skipFrame = ROUND_DOWN(video.getFrameRate(), 8);
     }
 
     rfbReleaseClientIterator(it);
diff --git a/ikvm_video.cpp b/ikvm_video.cpp
index dcf4abb..3c4e35b 100644
--- a/ikvm_video.cpp
+++ b/ikvm_video.cpp
@@ -34,7 +34,7 @@ using namespace sdbusplus::xyz::openbmc_project::Common::Device::Error;
 
 Video::Video(const std::string& p, Input& input, int fr, int sub, int fmt) :
     resizeAfterOpen(false), timingsError(false), fd(-1), frameRate(fr),
-    lastFrameIndex(-1), height(600), width(800), subSampling(sub),
+    height(600), width(800), subSampling(sub),
 	format(fmt), input(input), path(p)
 {
 }
@@ -46,12 +46,21 @@ Video::~Video()
 
 char* Video::getData()
 {
-    if (lastFrameIndex >= 0)
+    if (buffersDone.empty())
     {
-        return (char*)buffers[lastFrameIndex].data;
+        return nullptr;
     }
 
-    return nullptr;
+    return (char*)buffers[buffersDone.front()].data;
+}
+
+char* Video::getData(unsigned int i)
+{
+    if (i >= buffers.size())
+    {
+        return nullptr;
+    }
+    return (char*)buffers[i].data;
 }
 
 void Video::getFrame()
@@ -67,6 +76,12 @@ void Video::getFrame()
         return;
     }
 
+    // Don't get more new frames until we run out of previous ones
+    if (!buffersDone.empty())
+    {
+        return;
+    }
+
     FD_ZERO(&fds);
     FD_SET(fd, &fds);
 
@@ -95,48 +110,59 @@ void Video::getFrame()
 
                 if (!(buf.flags & V4L2_BUF_FLAG_ERROR))
                 {
-                    lastFrameIndex = buf.index;
-                    buffers[lastFrameIndex].payload = buf.bytesused;
-                    break;
+                    buffers[buf.index].payload = buf.bytesused;
+                    buffers[buf.index].sequence = buf.sequence;
+                    buffersDone.push_back(buf.index);
                 }
                 else
                 {
                     buffers[buf.index].payload = 0;
+                    qbuf(buf.index);
                 }
             }
         } while (rc >= 0);
     }
 
     fcntl(fd, F_SETFL, fd_flags);
+}
+
+void Video::qbuf(int i)
+{
+    int rc;
+    v4l2_buffer buf;
 
-    for (unsigned int i = 0; i < buffers.size(); ++i)
+    if (!buffers[i].queued)
     {
-        if (i == (unsigned int)lastFrameIndex)
+        memset(&buf, 0, sizeof(v4l2_buffer));
+        buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        buf.memory = V4L2_MEMORY_MMAP;
+        buf.index = i;
+
+        rc = ioctl(fd, VIDIOC_QBUF, &buf);
+        if (rc)
         {
-            continue;
+            log<level::ERR>("Failed to queue buffer",
+                            entry("ERROR=%s", strerror(errno)));
         }
-
-        if (!buffers[i].queued)
+        else
         {
-            memset(&buf, 0, sizeof(v4l2_buffer));
-            buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-            buf.memory = V4L2_MEMORY_MMAP;
-            buf.index = i;
-
-            rc = ioctl(fd, VIDIOC_QBUF, &buf);
-            if (rc)
-            {
-                log<level::ERR>("Failed to queue buffer",
-                                entry("ERROR=%s", strerror(errno)));
-            }
-            else
-            {
-                buffers[i].queued = true;
-            }
+            buffers[i].queued = true;
         }
     }
 }
 
+void Video::releaseFrames()
+{
+    int i;
+
+    while (!buffersDone.empty())
+    {
+        i = buffersDone.front();
+        buffersDone.pop_front();
+        qbuf(i);
+    }
+}
+
 bool Video::needsResize()
 {
     int rc;
@@ -186,7 +212,7 @@ bool Video::needsResize()
                 xyz::openbmc_project::Common::File::Open::PATH(path.c_str()));
         }
 
-        lastFrameIndex = -1;
+        buffersDone.clear();
         return true;
     }
 
@@ -501,7 +527,7 @@ void Video::stop()
         return;
     }
 
-    lastFrameIndex = -1;
+    buffersDone.clear();
 
     rc = ioctl(fd, VIDIOC_STREAMOFF, &type);
     if (rc)
diff --git a/ikvm_video.hpp b/ikvm_video.hpp
index 9669ebe..0cc0b76 100644
--- a/ikvm_video.hpp
+++ b/ikvm_video.hpp
@@ -5,6 +5,7 @@
 #include <mutex>
 #include <string>
 #include <vector>
+#include <deque>
 
 namespace ikvm
 {
@@ -36,8 +37,11 @@ class Video
      * @return Pointer to the video frame data
      */
     char* getData();
+    char* getData(unsigned int i);
     /* @brief Performs read to grab latest video frame */
     void getFrame();
+    /* @brief Performs return done video frames back to driver */
+    void releaseFrames();
     /*
      * @brief Gets whether or not the video frame needs to be resized
      *
@@ -73,7 +77,28 @@ class Video
      */
     inline size_t getFrameSize() const
     {
-        return buffers[lastFrameIndex].payload;
+        if (buffersDone.empty())
+            return 0;
+        return buffers[buffersDone.front()].payload;
+    }
+    inline size_t getFrameSize(unsigned int i) const
+    {
+        return buffers[i].payload;
+    }
+    /*
+     * @brief Gets the video frame count in sequence
+     *
+     * @return Value of video frame count in sequence
+     */
+    inline size_t getFrameCount() const
+    {
+        if (buffersDone.empty())
+            return 0;
+        return buffers[buffersDone.front()].sequence;
+    }
+    inline size_t getFrameCount(unsigned int i) const
+    {
+        return buffers[i].sequence;
     }
     /*
      * @brief Gets the height of the video frame
@@ -138,8 +163,12 @@ class Video
     static const int bytesPerPixel;
     /* @brief Number of components in a pixel (i.e. 3 for RGB pixel) */
     static const int samplesPerPixel;
+    /* @brief done buffer storage */
+    std::deque<int> buffersDone;
 
   private:
+    void qbuf(int i);
+
     /*
      * @struct Buffer
      * @brief Store the address and size of frame data from streaming
@@ -160,6 +189,7 @@ class Video
         bool queued;
         size_t payload;
         size_t size;
+        uint32_t sequence;
     };
 
     /*
@@ -173,8 +203,6 @@ class Video
     int fd;
     /* @brief Desired frame rate of video stream in frames per second */
     int frameRate;
-    /* @brief Buffer index for the last video frame */
-    int lastFrameIndex;
     /* @brief Height in pixels of the video frame */
     size_t height;
     /* @brief Width in pixels of the video frame */
-- 
2.25.1

