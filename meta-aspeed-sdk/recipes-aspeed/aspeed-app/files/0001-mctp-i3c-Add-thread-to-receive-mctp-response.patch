From c57d1efbd10d5f3a0edb37d42d1bec50fc8fca57 Mon Sep 17 00:00:00 2001
From: Steven Lee <steven_lee@aspeedtech.com>
Date: Tue, 9 Jan 2024 16:12:02 +0800
Subject: [PATCH] mctp-i3c: Add thread to receive mctp response

The patch is for supporting get mctp response from
intel mctp target driver.
To receive mctp response from the driver, it should
poll the fd before sending mctp request, otherwise,
driver drops the message.

Signed-off-by: Steven Lee <steven_lee@aspeedtech.com>
---
 mctp-i3c/mctp-i3c.c | 39 +++++++++++++++++++++++++++++++++++----
 1 file changed, 35 insertions(+), 4 deletions(-)

diff --git a/mctp-i3c/mctp-i3c.c b/mctp-i3c/mctp-i3c.c
index e703da5..18ac094 100644
--- a/mctp-i3c/mctp-i3c.c
+++ b/mctp-i3c/mctp-i3c.c
@@ -18,6 +18,7 @@
 #include <poll.h>
 #include <linux/types.h>
 #include <sys/stat.h>
+#include <pthread.h>
 
 #define MCTP_BTU 68
 #define I3C_MCTP_HDR_SIZE 4
@@ -40,6 +41,8 @@ struct i3c_mctp_packet {
 	__u32 size;
 };
 
+int fd;
+pthread_t thread_mctp;
 const char *sopts = "d:prw:h";
 static const struct option lopts[] = {
 	{"device",		required_argument,	NULL,	'd' },
@@ -229,6 +232,32 @@ int i3c_mctp_send(int fd, struct i3c_mctp_xfer *xfer)
 	return ret;
 }
 
+void *mctp_read_handler(void *arg)
+{
+	struct pollfd fds[1];
+	struct i3c_mctp_xfer xfer;
+	uint32_t buf[17];
+	int ret;
+	fds[0].fd = fd;
+	fds[0].events = POLLIN | POLLOUT | POLLPRI | POLLERR;
+
+	while(1) {
+		if (poll(fds, 1, -1) <= 0) {
+			continue;
+		}
+		if (!(fds[0].events & POLLIN))
+			continue;
+		lseek(fd, 0, SEEK_SET);
+		ret = read(fd, buf, sizeof(buf));
+		xfer.len = ret;
+		xfer.data = buf;
+		if (ret > 0) {
+			print_rx_data(&xfer);
+			pthread_exit(NULL);
+		}
+	}
+}
+
 int i3c_mctp_priv_xfer(int fd, struct i3c_mctp_xfer *xfer)
 {
 	int ret;
@@ -237,6 +266,7 @@ int i3c_mctp_priv_xfer(int fd, struct i3c_mctp_xfer *xfer)
 		wait_for_message(fd);
 		ret = i3c_mctp_recv(fd, xfer);
 	} else {
+		pthread_create(&thread_mctp, NULL, mctp_read_handler, &xfer);
 		ret = i3c_mctp_send(fd, xfer);
 	}
 	return ret;
@@ -245,7 +275,7 @@ int i3c_mctp_priv_xfer(int fd, struct i3c_mctp_xfer *xfer)
 int main(int argc, char *argv[])
 {
 	struct i3c_mctp_xfer *xfers;
-	int file, ret, opt, i;
+	int ret, opt, i;
 	int nxfers = 0;
 	char *device = NULL;
 
@@ -276,8 +306,8 @@ int main(int argc, char *argv[])
 	if (!device)
 		exit(EXIT_FAILURE);
 
-	file = open(device, O_RDWR);
-	if (file < 0)
+	fd = open(device, O_RDWR);
+	if (fd < 0)
 		exit(EXIT_FAILURE);
 	xfers = (struct i3c_mctp_xfer *)calloc(nxfers, sizeof(*xfers));
 	if (!xfers)
@@ -310,7 +340,7 @@ int main(int argc, char *argv[])
 		}
 	}
 	for (i = 0; i < nxfers; i++) {
-		if (i3c_mctp_priv_xfer(file, &xfers[i]) < 0) {
+		if (i3c_mctp_priv_xfer(fd, &xfers[i]) < 0) {
 			fprintf(stderr, "Error: transfer failed: %s\n", strerror(errno));
 			ret = EXIT_FAILURE;
 			goto err_free;
@@ -320,6 +350,7 @@ int main(int argc, char *argv[])
 			print_rx_data(&xfers[i]);
 	}
 	ret = EXIT_SUCCESS;
+	pthread_join(thread_mctp, NULL);
 err_free:
 	for (i = 0; i < nxfers; i++)
 		free((void *)(uintptr_t)xfers[i].data);
-- 
2.25.1

