From 09993de2e4c101ebfa860f0e06f1f58f2a269c0a Mon Sep 17 00:00:00 2001
From: Jamin Lin <jamin_lin@aspeedtech.com>
Date: Wed, 20 Jul 2022 10:18:22 +0800
Subject: [PATCH] Support websocket control frame callback

boost::beast::websocket provide control_callback() to register control
frame callback. This patch enables the callback and hook up with Handler
implementation for onclose/onping/onpong.

v2-v3: Fix coding style issue

Signed-off-by: Troy Lee <troy_lee@aspeedtech.com>
Change-Id: I912cd6ff823e938cc429e75ff635b8d8fad17876

---
 http/routing.hpp   | 22 ++++++++++++++++++++--
 http/websocket.hpp | 45 +++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 63 insertions(+), 4 deletions(-)

diff --git a/http/routing.hpp b/http/routing.hpp
index 3a7b9c2..aa9c91a 100644
--- a/http/routing.hpp
+++ b/http/routing.hpp
@@ -350,7 +350,7 @@ class WebSocketRule : public BaseRule
             myConnection = std::make_shared<
                 crow::websocket::ConnectionImpl<boost::asio::ip::tcp::socket>>(
                 req, std::move(adaptor), openHandler, messageHandler,
-                closeHandler, errorHandler);
+                closeHandler, errorHandler, pingHandler, pongHandler);
         myConnection->start();
     }
 #ifdef BMCWEB_ENABLE_SSL
@@ -364,7 +364,7 @@ class WebSocketRule : public BaseRule
             myConnection = std::make_shared<crow::websocket::ConnectionImpl<
                 boost::beast::ssl_stream<boost::asio::ip::tcp::socket>>>(
                 req, std::move(adaptor), openHandler, messageHandler,
-                closeHandler, errorHandler);
+                closeHandler, errorHandler, pingHandler, pongHandler);
         myConnection->start();
     }
 #endif
@@ -397,6 +397,20 @@ class WebSocketRule : public BaseRule
         return *this;
     }
 
+    template <typename Func>
+    self_t& onping(Func f)
+    {
+        pingHandler = f;
+        return *this;
+    }
+
+    template <typename Func>
+    self_t& onpong(Func f)
+    {
+        pongHandler = f;
+        return *this;
+    }
+
   protected:
     std::function<void(crow::websocket::Connection&)> openHandler;
     std::function<void(crow::websocket::Connection&, const std::string&, bool)>
@@ -404,6 +418,10 @@ class WebSocketRule : public BaseRule
     std::function<void(crow::websocket::Connection&, const std::string&)>
         closeHandler;
     std::function<void(crow::websocket::Connection&)> errorHandler;
+    std::function<void(crow::websocket::Connection&, const std::string&)>
+        pingHandler;
+    std::function<void(crow::websocket::Connection&, const std::string&)>
+        pongHandler;
 };
 
 template <typename T>
diff --git a/http/websocket.hpp b/http/websocket.hpp
index 3aa8554..c773e2b 100644
--- a/http/websocket.hpp
+++ b/http/websocket.hpp
@@ -74,14 +74,18 @@ class ConnectionImpl : public Connection
         std::function<void(Connection&, const std::string&, bool)>
             messageHandlerIn,
         std::function<void(Connection&, const std::string&)> closeHandlerIn,
-        std::function<void(Connection&)> errorHandlerIn) :
+        std::function<void(Connection&)> errorHandlerIn,
+        std::function<void(Connection&, const std::string&)> pingHandlerIn,
+        std::function<void(Connection&, const std::string&)> pongHandlerIn) :
         Connection(reqIn, reqIn.session == nullptr ? std::string{}
                                                    : reqIn.session->username),
         ws(std::move(adaptorIn)), inBuffer(inString, 131088),
         openHandler(std::move(openHandlerIn)),
         messageHandler(std::move(messageHandlerIn)),
         closeHandler(std::move(closeHandlerIn)),
-        errorHandler(std::move(errorHandlerIn)), session(reqIn.session)
+        errorHandler(std::move(errorHandlerIn)),
+        pingHandler(std::move(pingHandlerIn)),
+        pongHandler(std::move(pongHandlerIn)), session(reqIn.session)
     {
         /* Turn on the timeouts on websocket stream to server role */
         ws.set_option(boost::beast::websocket::stream_base::timeout::suggested(
@@ -147,6 +151,41 @@ class ConnectionImpl : public Connection
             }
             acceptDone();
         });
+
+        ws.control_callback([this, self(shared_from_this())](
+                                boost::beast::websocket::frame_type kind,
+                                std::string_view payload) {
+            switch (kind)
+            {
+                case boost::beast::websocket::frame_type::close:
+                {
+                    BMCWEB_LOG_DEBUG << "Control frame [CLOSE]: " << payload;
+                    if (closeHandler)
+                    {
+                        closeHandler(*this, std::string(payload));
+                    }
+                    break;
+                }
+                case boost::beast::websocket::frame_type::ping:
+                {
+                    BMCWEB_LOG_DEBUG << "Control frame [PING]: " << payload;
+                    if (pingHandler)
+                    {
+                        pingHandler(*this, std::string(payload));
+                    }
+                    break;
+                }
+                case boost::beast::websocket::frame_type::pong:
+                {
+                    BMCWEB_LOG_DEBUG << "Control frame [PONG]: " << payload;
+                    if (pongHandler)
+                    {
+                        pongHandler(*this, std::string(payload));
+                    }
+                    break;
+                }
+            }
+        });
     }
 
     void sendBinary(const std::string_view msg) override
@@ -286,6 +325,8 @@ class ConnectionImpl : public Connection
     std::function<void(Connection&, const std::string&, bool)> messageHandler;
     std::function<void(Connection&, const std::string&)> closeHandler;
     std::function<void(Connection&)> errorHandler;
+    std::function<void(Connection&, const std::string&)> pingHandler;
+    std::function<void(Connection&, const std::string&)> pongHandler;
     std::shared_ptr<persistent_data::UserSession> session;
 };
 } // namespace websocket

